{"ast":null,"code":"var _jsxFileName = \"/home/jeffsimon22/react/my-projects/src/StarWarsDB/StarWarsDB.js\";\nimport React, { Component } from 'react';\nimport './StarWarsDB.css';\nimport StarWarsData from './StarWarsData';\nimport SingleCellContent from './SingleCellContent';\n\nclass StarWarsDB extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      colHeaders: [],\n      data: [] // constructor(props){\n      //   super(props);\n      //   this.state = {\n      //   };\n      // }\n      // componentWillMount(){}\n\n    };\n  }\n\n  componentDidMount() {\n    let headerCells = [],\n        entry = StarWarsData.results[0];\n\n    for (let k in entry) {\n      headerCells.push(React.createElement(\"th\", {\n        key: k,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, k));\n    }\n\n    const colHeaders = React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, headerCells);\n    this.setState({\n      colHeaders: colHeaders,\n      data: StarWarsData.results\n    });\n  } // componentWillUnmount(){}\n  // componentWillReceiveProps(){}\n  // shouldComponentUpdate(){}\n  // componentWillUpdate(){}\n  // componentDidUpdate(){}\n\n\n  render() {\n    const tableRows = this.state.data.map(entry => {\n      let tableCells = [];\n\n      for (let k in entry) {\n        let content;\n\n        switch (k) {\n          case \"name\":\n            content = React.createElement(\"a\", {\n              href: entry[\"url\"],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 46\n              },\n              __self: this\n            }, entry[k]);\n            break;\n\n          case \"homeworld\":\n          case \"species\":\n            content = React.createElement(SingleCellContent, {\n              api: entry[k],\n              field: \"name\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 50\n              },\n              __self: this\n            });\n            break;\n\n          case \"vehicles\":\n            content = [];\n\n            for (let i = 0; i < entry[k].length; i++) {\n              content.push(React.createElement(SingleCellContent, {\n                key: \"film_\" + i,\n                api: entry[k][i],\n                field: \"name\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 55\n                },\n                __self: this\n              }));\n            }\n\n            break;\n\n          case \"films\":\n            content = [];\n\n            for (let i = 0; i < entry[k].length; i++) {\n              content.push(React.createElement(SingleCellContent, {\n                key: \"film_\" + i,\n                api: entry[k][i],\n                field: \"title\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 61\n                },\n                __self: this\n              }));\n            }\n\n            break;\n\n          default:\n            content = entry[k];\n        }\n\n        tableCells.push(React.createElement(\"td\", {\n          key: k,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, content));\n      }\n\n      return React.createElement(\"tr\", {\n        key: \"body_\" + entry.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, tableCells);\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Use the Force!\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.state.colHeaders), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, tableRows)));\n  }\n\n}\n\nexport default StarWarsDB;","map":{"version":3,"sources":["/home/jeffsimon22/react/my-projects/src/StarWarsDB/StarWarsDB.js"],"names":["React","Component","StarWarsData","SingleCellContent","StarWarsDB","state","colHeaders","data","componentDidMount","headerCells","entry","results","k","push","setState","render","tableRows","map","tableCells","content","i","length","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './StarWarsDB.css';\n\nimport StarWarsData from './StarWarsData';\nimport SingleCellContent from './SingleCellContent';\n\nclass StarWarsDB extends Component {\n  state = {\n    colHeaders: [],\n    data: []\n  }\n  // constructor(props){\n  //   super(props);\n  //   this.state = {\n  //   };\n  // }\n\n  // componentWillMount(){}\n  componentDidMount() {\n    let headerCells = [], entry = StarWarsData.results[0];\n    for (let k in entry) {\n      headerCells.push(<th key={k}>{k}</th>);\n    }\n    const colHeaders = <tr>{headerCells}</tr>;\n\n    this.setState({ \n      colHeaders: colHeaders,\n      data: StarWarsData.results\n    });\n  }\n  // componentWillUnmount(){}\n\n  // componentWillReceiveProps(){}\n  // shouldComponentUpdate(){}\n  // componentWillUpdate(){}\n  // componentDidUpdate(){}\n\n  render() {\n    \n    const tableRows = this.state.data.map((entry) => {\n      let tableCells = [];\n      for (let k in entry) {\n        let content;\n        switch (k) {\n          case \"name\":\n            content = <a href={entry[\"url\"]}>{entry[k]}</a>\n            break;\n          case \"homeworld\":\n          case \"species\":\n            content = <SingleCellContent api={entry[k]} field=\"name\"/>;\n            break;\n          case \"vehicles\":\n            content = [];\n            for (let i=0; i<entry[k].length; i++) {\n              content.push(<SingleCellContent key={\"film_\"+i} api={entry[k][i]} field=\"name\"/>);\n            }\n            break;\n          case \"films\":\n            content = [];\n            for (let i=0; i<entry[k].length; i++) {\n              content.push(<SingleCellContent key={\"film_\"+i} api={entry[k][i]} field=\"title\"/>);\n            }\n            break;\n          default:\n            content = entry[k];\n        }\n        tableCells.push(<td key={k}>{content}</td>);\n      }\n      return (<tr key={\"body_\"+entry.name}>{tableCells}</tr>)\n    })\n\n    return (\n      <div>Use the Force!<br />\n        <table>\n          <thead>\n            {this.state.colHeaders}\n          </thead>\n          <tbody>\n            {tableRows}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default StarWarsDB;"]},"metadata":{},"sourceType":"module"}